                                                                        《基础算法》
Num1----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
《排序》
<冒泡排序>
#include<stdio.h>
int q[100000];
void quick_sort(int l, int r)
{
	if (l >= r)
		return;
	int x = q[l], i = l - 1, j = r + 1;
	while (i < j)
	{
		do i++; while (q[i] < x);
		do j--; while (q[j] > x);
		if (i < j)
		{
			int tmp = q[i];
			q[i] = q[j];
			q[j] = tmp;
		}
	}
	quick_sort(l, j);
	quick_sort(j+1, r);
}
int main()
{
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		scanf("%d", &q[i]);
	quick_sort(0, n - 1);
	for (int i = 0; i < n; i++)                                    

		printf("%d ", q[i]);
	return 0;
}

问题1:递归时为什么不选其他的，非要选l,j和j+1,r
问题2:为什么l>=而不是l>r或者l==r
问题3:为什么x=q[l]
问题4:为什么是do while

一: 1:如果是j,j 输入0,1第二个quick_sort的j,r还是0,1(死循环)
   2:如果是i,i 输入0,1第二个quick_sort的l,i还是0,1(死循环)
   3:      i,i+1 输入2 3 1输出结果错误(1 3 2)
   4:      j-1,j 输入1,2(死循环)
   5:      
二:当l=r 第一个quick_sort一直循环
三:l等价于(l+r)/2 ———— (l,j) (j+1,r)
   r等价于(l++r+1)/2 ———— (l,i-1) (i,r)
   这与quick_sort中j有关,前面j的取值就是因为这里限制的
四:如果是2 2 3 i和j最后都走不动了


<归并排序>
#include<stdio.h>
int q[100010], temp[100010];
void merge_sort(int l, int r)
{
	if (l >= r)
		return;
	int mid = (l + r) / 2; 
	
	//进行两段排序
	merge_sort(l, mid);
	merge_sort(mid+1, r);
	int k = 0,int i = l, j = mid + 1;
	
	//将两段合并
	while (i <= mid && j <= r)
	{
	      if (q[i] > q[j])
		  temp[k++] = q[j++];
	      else
		  temp[k++] = q[i++];
	}
	while (j <= r) 
		temp[k++] = q[j++];
	while (i <= mid) 
		temp[k++] = q[i++];
		
	//将排好序的片段打印到q中
	for (int i = l,j=0; i <= r; i++,j++)
		q[i] = temp[j];
}

int main()
{
	int n; scanf("%d", &n);
	for (int i = 0; i < n; i++)
		scanf("%d", &q[i]);
	merge_sort(0, n - 1);
	for (int i = 0; i < n; i++)
		printf("%d ", temp[i]);
	return 0;
}





《二分》
<整数二分>
// 区间[l, r]被划分成[l, mid]和[mid + 1, r],
int bsearch_1(int l, int r)
{
    while (l < r)
    {
        int mid = (l + r)/2;
        if (x <= q[mid]) 
	    r = mid;    // check()判断mid是否满足性质
        else 
	    l = mid + 1;
    }
    return l;
}
// 区间[l, r]被划分成[l, mid - 1]和[mid, r]
int bsearch_2(int l, int r)
{
    while (l < r)
    {
        int mid = (l + r + 1)/2;
        if (x >= q[mid]) 
	    l = mid;
        else 
	    r = mid - 1;
    }
    return l;
}

注:bsearch_1寻找第一个大于等于k的值
   bsearch_2寻找最后一个小于等于k的值
   
问题1：if中的条件为什么带‘=’，以及两次l和r的取值为什么不同
问题2：两次mid取值为什么不同

一：由注释我们可以看出二分不仅限于找出x，他可以寻找第一个大于等于k的值以及最后一个小于等于k的值。所以我们如何实现这种代码呢？
先看bsearch_1：
当a[mid]<x时，令l = mid + 1，mid及其左边的位置被排除了，可能出现解的位置是mid + 1及其后面的位置；
当x<=a[mid]时，说明mid及其左边可能含有值为x的元素；
当查找结束时，l与r相遇，l所在元素若是x则一定是x出现最小位置，因为l左边的元素必然都小于x
同理bsearch_1也可以进行相似的类比得出。
二：可以用两个数，很容易发现他会死循环


<浮点数二分>
#include<stdio.h>
double x;
double bsearch(double l, double r)
{
	double mid;
	while (r - l > 1e-8)//这里的精度一般比题目中的大2
	{
		mid = (l + r) / 2;
		if (mid*mid*mid > x)//是几分就乘以几个mid
			r = mid;
		else
			l = mid;
	}
	return mid;//输出l，r，mid都可以
}
int main()
{
	scanf("%lf", &x);
	printf("%.6f", bsearch(-10000, 10000));
	return 0;
}

Num3---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- -
《高精度》
<A + B>
#include<stdio.h>
char ch1[100010], ch2[100010], ch3[100010];
void my_strrev(int l, int r)
{
	while (l < r)
	{
		char tem = ch2[l];
		ch2[l] = ch2[r];
		ch2[r] = tem;
		l++, r--;
	}
}
int main()
{
	scanf("%s%s", ch1, ch2);
	int len1 = strlen(ch1), len2 = strlen(ch2);//求A和B长度
	int r = len1 - 1, l = 0;

	//逆序便于从个位开始
	my_strrev(0, len1 - 1);
	my_strrev(0, len2 - 1);

	//将字符数字转化为整形
	for (int i = 0, j = len1; i < j; i++)
		ch1[i] -= '0';
	for (int i = 0, j = len2; i < j; i++)
		ch2[i] -= '0';

	//计算
	int i = 0, t = 0;
	for (; i < len1 || i < len2; i++)
	{
		ch3[i] = (t + ch1[i] + ch2[i]) % 10;
		t = (t + ch1[i] + ch2[i]) / 10;
	}

	//先输出最高位，若为0不输出
	if (t)
		printf("%d", t);

	//输出
	for (i--; i >= 0; i--)
		printf("%d", ch3[i]);
	return 0;
}


<A - B>




































Num2-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
